url()
url('')
url('.')
url('www/texturebg.png')
file('www/texturebg.png')
runApp('src')
url("www/texturebg.png")
?url
runApp('src')
getwd()
dir()
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
shiny::runApp('src')
library('shiny')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
?wellPanel
runApp('src')
runApp('src')
runApp('src')
fileInput
?fileInput
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
?uiOutput
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
?wellPanel
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
tableOutput
?tableOutput
?fluidRow
?column
runApp('src')
?tableOutput
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
?fluidRow
runApp('src')
runApp('src')
?tableOutput
runApp('src')
runApp('src')
runApp('src')
runApp('src')
?HTML
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
install.packages('imager')
install.packages('imager')
install.packages('imager')
runApp('src')
?renderImage
image([1,1,0;0,0,1])
image(c(1,1,0;0,0,1))
image(c(c(1,1,0)c(0,0,1)))
image()
image(matrix(data = 1:9,nrow = 3))
?shiny::actionButton
?lapply
mapply(rep,1:4,1:4)
mapply(function(s) s+1,matrix(data = 1:9,nrow = 3))
matrix(data = 1:9,nrow = 3)
matrix(data = 1:9,nrow = 3,byrow = T)
matrix(mapply(function(s) s+1,matrix(data = 1:9,nrow = 3)),nrow = 3,byrow = T)
matrix(mapply(function(s) s+1,matrix(data = 1:9,nrow = 3)),nrow = 3)
matrix(data = 1:9,nrow = 3)
matrix(mapply(function(s) s+1,matrix(data = 1:9,nrow = 3)),nrow = 3)
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
library('bmp')
lapply(1:2,function(i){})
lapply(1:2,function(i){imagename = paste0('i',i) \
lapply(1:2,function(i){imagename = paste0('i',i)
})
list('i1')
imageOutput('image1')
shiny::imageOutput('image1')
lapply(1:2,function(i){imagename = paste0('i',i)
shiny::imageOutput(imagename)
})
shiny::tagList(list(shiny::imageOutput('im1')))
shiny::runApp('src')
runApp('src')
runApp('src')
shiny::runApp('src')
parallel::detectCores()
workerfun <- function(x) return(as.numeric(tail(rev(intToBits(int)),n = 8)))
lapply(1:5,workerfun)
workerfun <- function(x) return(as.numeric(tail(rev(intToBits(x)),n = 8)))
lapply(1:5,workerfun)
sapply(1:5,workerfun)
t(sapply(1:5,workerfun))
?lapply
as.vector(t(sapply(1:5,workerfun)))
as.vector(sapply(1:5,workerfun))
nWorkers <- parallel::detectCores()
parallel::mclapply(1:5,workerfun,mc.cores = nWorkers)
unlist(parallel::mclapply(1:5,workerfun,mc.cores = nWorkers))
as.vector(sapply(1:5,workerfun))
shiny::runApp('src')
runApp('src')
?image
1:10[-2,3]
1:10[c(-2,3)]
1:10[-2]
1:10[]
1:10[1]
a <- 1:10
a[-2]
a[c(-2,-3)]
lapply(1:(1255*1600))
(1:(1255*1600))
m <- matrix(1:20,ncol=5)
m
m[,-5]
matrix(1:20,ncol=5)[,-5]
2009255/1255
pico(m)
plot(m)
image(m)
image(m,width= 20,height=20,units = 'px')
warnings()
image(m,pin = c(20,20))
image(m,pin = c(30,30))
image(m,pin = c(50,50))
image(m,pin = c(150,150))
runApp('src')
getwd
getwd()
?system
system('ls')
print(x <- 1)
shiny::runApp('src')
system('R CMD SHLIB trial.cpp')
system('export PKG_CXXFLAGS=`Rscript -e "Rcpp:::CxxFlags()"`')
system('export PKG_LIBS=`Rscript -e "Rcpp:::LdFlags()"`')
system('R CMD SHLIB trial.cpp')
runApp('src')
runApp('src')
runApp('src')
runApp('src')
shiny::runApp()
getwd()
runApp()
?withProgress
runApp()
shiny::runApp()
shiny::runApp()
img <- matrix(1:16, 4, 4)
image(img)
ggimage(t(img[,4:1]), fullpage = FALSE, scale_axes = TRUE)
lib('ggmpa')
lib('ggmap')
img <- matrix(1:16, 4, 4)
image(img)
ggimage(t(img[,4:1]), fullpage = FALSE, scale_axes = TRUE)
system("export PKG_LIBS=`pkg-config --libs opencv` `Rscript -e 'Rcpp:::LdFlags()' -fopenmp -lgomp`")
system("export PKG_CFLAGS=`pkg-config --cflags opencv`")
system("export PKG_CXXFLAGS=`pkg-config --cflags opencv` `Rscript -e 'Rcpp:::CxxFlags()' -fopenmp`")
system("export PKG_LIBS=`pkg-config --libs opencv` `R -e 'Rcpp:::LdFlags()' -fopenmp -lgomp`")
system("export PKG_CFLAGS=`pkg-config --cflags opencv`")
system("export PKG_CXXFLAGS=`pkg-config --cflags opencv` `R -e 'Rcpp:::CxxFlags()' -fopenmp`")
getwd()
ls
dir()
system("R CMD SHLIB ../build/negativeT.cpp")
dyn.load('../build/negativeT.so')
dir()
system("R CMD SHLIB ../build/mirrorTV")
system("export PKG_LIBS=`pkg-config --libs opencv` `R -e 'Rcpp:::LdFlags()' -fopenmp -lgomp`")
system("export PKG_CFLAGS=`pkg-config --cflags opencv`")
system("export PKG_CXXFLAGS=`pkg-config --cflags opencv` `R -e 'Rcpp:::CxxFlags()' -fopenmp`")
system("R CMD SHLIB ../build/mirrorTV")
system("R CMD SHLIB ../build/mirrorTV.cpp")
system("R CMD SHLIB ../build/mirrorTH.cpp")
system("R CMD SHLIB ../build/rotateT.cpp")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
wellPanel
?wellPanel
runApp()
?column
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderUI
?renderText
runApp()
runApp()
runApp()
?conditionalPanel
runApp()
runApp()
runApp()
runApp()
?fileInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?uiOutput
runApp()
runApp()
runApp()
?plotOutput
?renderImage
?renderPlot
?renderImage
?renderPlot
?renderImage
runApp()
runApp()
img <- matrix(1:16, 4, 4)
img <- matrix(1:32, 4, 4)
img
as.matrix(1:32)
as.matrix(1:32,4,4,2)
as.matrix(1:32,4)
data.frame(1:16)
data.frame(1:16,3)
data.frame(1:16)
data.frame(1:16)
list(1:2)
list(1:24)
l <- c(c(c(1,2),c(5,3),c(3,4)c(8,5))
l <- c(c(c(1,2),c(5,3),c(3,4)c(8,5)))
l <- c(c(c(1,2),c(5,3),c(3,4),c(8,5)))
l
l <- c(c(c(1,2),c(5,3),c(3,4),c(8,5)),c(c(1,2),c(5,3),c(3,4),c(8,5)))
l
array(1:16,3)
array(1:12,dim = c(2,3,2))
array(1:12,dim = c(3,2,2))
array(1:12,dim = c(2,2,3))
array(1:12,dim = c(3,2,2))
array(1:12,dim = c(3,2,2))
array(1:12,dim = c(2,3,2))
array(1:12,dim = c(2,2,3))
array(1:12,dim = c(2,3,2))
image(array(1:12,dim = c(2,3,2)))
lib('bmp')
lib('ggmpa')
lib('ggmap')
?ggimage
ggimage(array(1:12,dim = c(2,3,2)))
ggimage(array(1:12,dim = c(3,2,2)))
ggimage(array(1:12,dim = c(2,2,3)))
ggimage(array(1:12,dim = c(2,2,3)))
ggimage(array(1:12,dim = c(2,2,3)))
(array(1:12,dim = c(2,2,3)))
(array(1:12,dim = c(2,2,3)))
ggimage(array(1:12,dim = c(2,2,3)))
ggimage(array(1:8,dim = c(4,2,3)))
ggimage(array(1:8,dim = c(4,2,3)))
ggimage(array(1:8,dim = c(2,4,3)))
ggimage(array(1:4,dim = c(1,4,3)))
ggimage(array(1:4,dim = c(1,4,3)))
ggimage(array(1:4,dim = c(1,4,3)))
ggimage(array(1:4,dim = c(1,4,3)))
ggimage(array(1:8,dim = c(2,4,3)))
ggimage(array(1:4,dim = c(1,4,3)))
ggimage(array(1:8,dim = c(2,4,3)))
ggimage(array(1:8,dim = c(1,4,3)))
ggimage(array(1:8,dim = c(2,4,3)))
runApp()
lib('shiny')
runApp()
runApp()
runApp()
runApp()
lib('pixmap')
??read.image
getwd()
example.image <- adimpro::read.image(filename = '../test/aulamagna2.bmp',compress = F)
adimpro::show.image(example.image)
ggimage(example.image)
ggmap::ggimage(example.image)
ggmap::ggimage(as.array(example.image))
shiny::runApp()
runApp()
?ggimage
example.image
(array(1:8,dim = c(2,4,3)))
(array(1:24,dim = c(2,4,3)))
(array(1:12,dim = c(2,2,3)))
rm(example.image)
for (i in (array(1:12,dim = c(2,2,3)))){
print(i)
}
(array(1:12,dim = c(2,2,3)))
arr <- array(1:12,dim = c(2,2,3))
for (i in arr[1,1]){
print(i)
}
for (i in arr[1,1,1]){
print(i)
}
for (i in arr[1,1,]){
print(i)
}
for (i in arr[1,,1]){
print(i)
}
for (i in arr[,1,1]){
print(i)
}
arr[,1,1]
arr
for (i in arr[,,1]){
print(i)
}
dim(arr)
for (i in 1:dim(arr)[3]){
print(i)
}
for (i in 1:dim(arr)[3]){
print(arr[,,i])
}
for (i in 1:dim(arr)[2]){
print(arr[,i,])
}
for(k in 1:dim(arr)[1]){
for (i in 1:dim(arr)[2]){
for(j in 1:dim(arr)[3]){
print(arr[,i,j])
}
}
}
for(k in 1:dim(arr)[1]){
for (i in 1:dim(arr)[2]){
for(j in 1:dim(arr)[3]){
print(arr[k,i,j])
}
}
}
arr
es <- 1:12
for(k in 1:dim(arr)[1]){
for (i in 1:dim(arr)[2]){
for(j in 1:dim(arr)[3]){
arr[k,i,j] <- es[(k-1) * dim(arr)[1] + i + j]
}
}
}
arr
es <- matrix(1:12,nrow = 2)
for(k in 1:dim(arr)[1]){
for (i in 1:dim(arr)[2]){
for(j in 0:2){
arr[k,i,j] <- es[k,i + j]
}
}
}
es <- matrix(1:12,nrow = 2)
for(k in 1:dim(arr)[1]){
for (i in 1:dim(arr)[2]){
for(j in 0:2){
arr[k,i,j] <- es[k,i + j]
}
}
}
arr
es
es <- matrix(1:12,nrow = 2,byrow = T)
es
for(k in 1:dim(arr)[1]){
for (i in 1:dim(arr)[2]){
for(j in 0:2){
arr[k,i,j] <- es[k,i + j]
}
}
}
arr
for(k in 1:dim(es)[1]){
for (i in 1:dim(es)[2]){
for(j in 0:2){
arr[k,i,j] <- es[k,i + j]
}
}
}
shiny::runApp()
Sys.setenv("PKG_LIBS" ="`pkg-config --libs opencv` `Rscript -e 'Rcpp:::LdFlags()' -fopenmp -lgomp`")
Sys.setenv("PKG_CFLAGS" ="`pkg-config --cflags opencv`")
Sys.setenv("PKG_CXXFLAGS"="`pkg-config --cflags opencv` `Rscript -e 'Rcpp:::CxxFlags()' -fopenmp`")
system("R CMD SHLIB ../build/equalizationI.cpp")
Sys.setenv("PKG_LIBS" ="`pkg-config --libs opencv` `Rscript -e 'Rcpp:::LdFlags()' -fopenmp -lgomp`")
Sys.setenv("PKG_CFLAGS" ="`pkg-config --cflags opencv`")
Sys.setenv("PKG_CXXFLAGS"="`pkg-config --cflags opencv` `Rscript -e 'Rcpp:::CxxFlags()' -fopenmp`")
system("R CMD SHLIB ../build/equalizationI.cpp")
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
Sys.setenv("PKG_LIBS" ="`pkg-config --libs opencv` `Rscript -e 'Rcpp:::LdFlags()' -fopenmp -lgomp`")
Sys.setenv("PKG_CFLAGS" ="`pkg-config --cflags opencv`")
Sys.setenv("PKG_CXXFLAGS"="`pkg-config --cflags opencv` `Rscript -e 'Rcpp:::CxxFlags()' -fopenmp`")
system("R CMD SHLIB ../build/umbralizationI.cpp")
runApp()
Sys.setenv("PKG_LIBS" ="`pkg-config --libs opencv` `Rscript -e 'Rcpp:::LdFlags()' -fopenmp -lgomp`")
Sys.setenv("PKG_CFLAGS" ="`pkg-config --cflags opencv`")
Sys.setenv("PKG_CXXFLAGS"="`pkg-config --cflags opencv` `Rscript -e 'Rcpp:::CxxFlags()' -fopenmp`")
system("R CMD SHLIB ../build/umbralizationI.cpp")
runApp()
Sys.setenv("PKG_LIBS" ="`pkg-config --libs opencv` `Rscript -e 'Rcpp:::LdFlags()' -fopenmp -lgomp`")
Sys.setenv("PKG_CFLAGS" ="`pkg-config --cflags opencv`")
Sys.setenv("PKG_CXXFLAGS"="`pkg-config --cflags opencv` `Rscript -e 'Rcpp:::CxxFlags()' -fopenmp`")
system("R CMD SHLIB ../build/equalizationI.cpp")
system("R CMD SHLIB ../build/umbralizationI.cpp")
runApp()
